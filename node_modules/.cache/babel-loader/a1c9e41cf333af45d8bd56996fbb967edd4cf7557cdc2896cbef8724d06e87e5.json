{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\damim\\\\Desktop\\\\notesapp\\\\app\\\\src\\\\pages\\\\User.js\",\n  _s = $RefreshSig$();\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst User = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [userInfo, setUserInfo] = useState(null);\n  useEffect(() => {\n    fetch(`/user/${userId}`).then(res => res.json()).then(data => {\n      setUserInfo(prevUserInfo => prevUserInfo = data);\n    });\n  }, []);\n  let info = {\n    userId: `${useParams()}`,\n    postId: nanoid(),\n    title: '',\n    text: ''\n  };\n  const [newInput, setNewInput] = useState(info);\n  function onChange(event) {\n    setNewInput(prevNewInfo => {\n      return {\n        ...prevNewInfo,\n        [event.target.name]: event.target.value\n      };\n    });\n  }\n  function handleClick(newInput) {\n    console.log(newInput);\n    fetch(`/user/${url}`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newInput)\n    }).then(response => response.json()).then(data => console.log(data));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Hello User\", userInfo !== null ? userInfo[0].name : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"title\",\n        name: \"title\",\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"text\",\n        children: \"Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"text\",\n        name: \"text\",\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => handleClick(newInput),\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(User, \"cjJaVzTg9yC/nhvrWxmjmp3PyaI=\", false, function () {\n  return [useParams, useParams];\n});\n_c = User;\nexport default User;\nvar _c;\n$RefreshReg$(_c, \"User\");","map":{"version":3,"names":["useParams","useState","useEffect","nanoid","User","userId","userInfo","setUserInfo","fetch","then","res","json","data","prevUserInfo","info","postId","title","text","newInput","setNewInput","onChange","event","prevNewInfo","target","name","value","handleClick","console","log","url","method","mode","headers","body","JSON","stringify","response"],"sources":["C:/Users/damim/Desktop/notesapp/app/src/pages/User.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\r\nimport {useState, useEffect} from 'react'\r\nimport { nanoid } from 'nanoid';\r\n\r\nconst User = ()=>{\r\n    const {userId} = useParams()\r\n    const[userInfo, setUserInfo] = useState(null)\r\n    useEffect(()=>{\r\n        fetch(`/user/${userId}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setUserInfo(prevUserInfo=> prevUserInfo = data)\r\n            })\r\n    },[])\r\n\r\n\r\n    let info = {\r\n        userId:`${useParams()}`,\r\n        postId:nanoid(),\r\n        title: '',\r\n        text:''\r\n    }\r\n\r\n    const  [newInput, setNewInput] = useState(info)\r\n\r\n    function onChange(event) {\r\n        setNewInput(prevNewInfo => {\r\n            return {...prevNewInfo, [event.target.name] : event.target.value}\r\n        })\r\n        \r\n    }\r\n    function handleClick(newInput){\r\n        console.log(newInput)\r\n        \r\n        fetch(`/user/${url}`,{\r\n            method: 'POST',\r\n            mode:'cors',\r\n            headers:{\"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify(newInput)\r\n        })\r\n        .then(response => response.json())\r\n        .then(data=> console.log(data))\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>Hello User{userInfo !== null ? userInfo[0].name:''}</h1> \r\n\r\n            <form>\r\n                <label htmlFor=\"title\">Title</label>\r\n                <input type=\"text\" id=\"title\" name=\"title\" onChange={onChange}/>\r\n                <label htmlFor=\"text\">Text</label>\r\n                <input type=\"text\" id=\"text\" name=\"text\" onChange={onChange}/>\r\n                <button type=\"button\" onClick={()=> handleClick(newInput)}>Add</button>\r\n            </form>\r\n        </div>\r\n     \r\n    )\r\n}\r\n\r\nexport default User"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,kBAAkB;AAC5C,SAAQC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACzC,SAASC,MAAM,QAAQ,QAAQ;AAAC;AAEhC,MAAMC,IAAI,GAAG,MAAI;EAAA;EACb,MAAM;IAACC;EAAM,CAAC,GAAGL,SAAS,EAAE;EAC5B,MAAK,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC7CC,SAAS,CAAC,MAAI;IACVM,KAAK,CAAE,SAAQH,MAAO,EAAC,CAAC,CACnBI,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;MACVL,WAAW,CAACM,YAAY,IAAGA,YAAY,GAAGD,IAAI,CAAC;IACnD,CAAC,CAAC;EACV,CAAC,EAAC,EAAE,CAAC;EAGL,IAAIE,IAAI,GAAG;IACPT,MAAM,EAAE,GAAEL,SAAS,EAAG,EAAC;IACvBe,MAAM,EAACZ,MAAM,EAAE;IACfa,KAAK,EAAE,EAAE;IACTC,IAAI,EAAC;EACT,CAAC;EAED,MAAO,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAACa,IAAI,CAAC;EAE/C,SAASM,QAAQ,CAACC,KAAK,EAAE;IACrBF,WAAW,CAACG,WAAW,IAAI;MACvB,OAAO;QAAC,GAAGA,WAAW;QAAE,CAACD,KAAK,CAACE,MAAM,CAACC,IAAI,GAAIH,KAAK,CAACE,MAAM,CAACE;MAAK,CAAC;IACrE,CAAC,CAAC;EAEN;EACA,SAASC,WAAW,CAACR,QAAQ,EAAC;IAC1BS,OAAO,CAACC,GAAG,CAACV,QAAQ,CAAC;IAErBV,KAAK,CAAE,SAAQqB,GAAI,EAAC,EAAC;MACjBC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAC,MAAM;MACXC,OAAO,EAAC;QAAC,cAAc,EAAE;MAAkB,CAAC;MAC5CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACjB,QAAQ;IACjC,CAAC,CAAC,CACDT,IAAI,CAAC2B,QAAQ,IAAIA,QAAQ,CAACzB,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAGe,OAAO,CAACC,GAAG,CAAChB,IAAI,CAAC,CAAC;EACnC;EAEA,oBACI;IAAA,wBACI;MAAA,yBAAeN,QAAQ,KAAK,IAAI,GAAGA,QAAQ,CAAC,CAAC,CAAC,CAACkB,IAAI,GAAC,EAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QAAM,eAE5D;MAAA,wBACI;QAAO,OAAO,EAAC,OAAO;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAc,eACpC;QAAO,IAAI,EAAC,MAAM;QAAC,EAAE,EAAC,OAAO;QAAC,IAAI,EAAC,OAAO;QAAC,QAAQ,EAAEJ;MAAS;QAAA;QAAA;QAAA;MAAA,QAAE,eAChE;QAAO,OAAO,EAAC,MAAM;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAa,eAClC;QAAO,IAAI,EAAC,MAAM;QAAC,EAAE,EAAC,MAAM;QAAC,IAAI,EAAC,MAAM;QAAC,QAAQ,EAAEA;MAAS;QAAA;QAAA;QAAA;MAAA,QAAE,eAC9D;QAAQ,IAAI,EAAC,QAAQ;QAAC,OAAO,EAAE,MAAKM,WAAW,CAACR,QAAQ,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAa;IAAA;MAAA;MAAA;MAAA;IAAA,QACpE;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAGd,CAAC;AAAA,GAtDKd,IAAI;EAAA,QACWJ,SAAS,EAYZA,SAAS;AAAA;AAAA,KAbrBI,IAAI;AAwDV,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}